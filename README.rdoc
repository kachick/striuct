= Striuct

* http://github.com/kachick/striuct
* https://rubygems.org/gems/striuct
* http://rubyforge.org/projects/striuct

== DESCRIPTION

A safety container for you, it is as handy as Struct(+).

== FEATURES
* When you link a object, Striuct checks "They are valid objects?".
  These checkers don't depend only types(class).
    The safety is made from your expressions.
* When use "inference", member will be fixed under class of first passed object.
* You can add a step just before link a object. (named "flavor" at here)
* You can use default-value, and we have different meanings between nil and default-value.
* It is without undesirable naming of conflict, no-identifier and some cases.
* Base API looks like Struct.
* No taint your name-space(exclude striuct/import).
* Pure Ruby

== SYNOPSIS

* setup
    require 'striuct'

* use two namespace (same meanings)
    Striuct
    StrictStruct

=== Struct+ "Safety"

==== A class macro named "member"

* Use "member" and you get a accessor, it looks Struct with testers. 
    class User < Striuct.new
      member :id,   Integer
      member :age,  (20..140)
      member :name, /\A\w+\z/, /\A\w+ \w+\z/
    end

    # pass
    user = User.new 128381, 20

    # pass
    user.age = 30
    user[2] = 'foo bar'

    # fail
    user[:id] = 10.0
    user.age = 19
    user[2] = nil

* Use functional object and you get a tester on upstairs.
    module Game
      class Character
      end

      class DB < Striuct.new
        member :monsters,   ->list{(list - characters).empty?}
        member :characters, ->list{list.all?{|c|c.kind_of? Character}}
      end
      
      monster = Character.new
      db = DB.new
      
      # fail
      db.characters = [1, 2]
      
      # pass
      db.characters = [monster, Character.new]
      
      # fail
      db.monsters = [Character.new]
      
      # pass
      db.monsters = [monster]
    end

* Use "inference" and all instance test under class of first passed object.
    class FlexibleContainer < Striuct.new
      member :anything, inference
      member :number,   inference, Numeric
    end

    fc1, fc2 = FlexibleContainer.new, FlexibleContainer.new
    # pass
    fc1.anything = 'str'
 
    # fail
    fc1.anything = :sym
    fc2.anything = :sym
    
    # pass
    fc2.anything = 'string too'
    
    # fail
    fc1.number = 'str'
    
    # pass
    fc1.number = 1.0

    # fail
    fc2.number = 1

==== Protect from risks in naming members

* Standard Struct dosen't check member-name. 
    NoGuard = Struct.new :object_id, :'?  !'
    noguard = NoGuard.new false
    noguard.object_id #=> false
    noguard.methods.include?(:'?  !') #=> false(lost!!)

* Striuct provides safety levels for this. (default: :prevent)
    class SafetyNaming < Striuct.new
      begin
        member :object_id
      rescue
        p $!
      end
      
      begin
        member :'?  !'
      rescue
        p $!
      end
      
      # set lower
      protect_level :struct
      
      member :object_id, :'?  !'
    end

==== Support utils

* acccept? / sufficient?   # can set a argument to a member 
* conditionable?           # can set a condition for any members
* inference?               # inference member and no passed any object
* restrict?                # has any conditions for a member
* strict?                  # now, all members are passed any conditions
* secure?                  # instance and class are fixed and strict 
* cname?                   # can use member name under protect level

=== Struct+ "Handy"

==== Flavor

* Block with member macro, it is called "flavor" at here.
  Below cases for type cast.
    class User2 < Striuct.new
      member :age, /\A\d+\z/, Numeric do |arg|
        Integer arg
      end
      
      member :name, ->v{v.respond_to? :to_s} do |v|
        v.to_s.to_sym
      end
    end
    
    user2 = User2.new
    user2.age = 9 #=> 9(Fixnum)
    user2.age = 10.1 #=> 10(Fixnum)
    user2.age = '10' #=> 10(Fixnum)

    user2.name = 10 #=> :10(Symbol)
    user2.name = Class #=> :Class(Symbol)

==== Default

* provides default value
    class User3 < Striuct.new
      member  :lank, Fixnum
      default :lank, 3
      member  :name
    end
    
    user3 = User3.new
    user3.lank #=> 3
    
* Standard Struct always define "nil is default". Realy?
   user3.name  #=> nil
   user3.assign? :name #=> false
   user3.name = nil
   user3.assign? :name #=> true

==== New Constructors

* Subclass.define reject floating object.
  * block parameter is new instance
  * except if no finished to assign each member(modifiable)
  * returning object is frozen(modifiable)
      user3 = User3.define do |r|
        r.lank = 10
        r.name = 'foo'
      end #=> (flozen)

* Subclass.[](load_pairs) make from Hash and like Hash
    user3 = User3[lank: 10, name: 'foo']

=== Almost interfaces are keeping Struct has.

    Sth1 = Striuct.new do
      def my_special_method
      end
    end
    
    Sth1.new.respond_to?(:my_special_method) #=> true

=== Others

* easy cast to Hash
  user3.to_h #=> {:lank=>3, :name=>nil}

* Here, not taint your name-space. but enhancers are too, you can choose it.
    require 'striuct/import'

* tips:
  * run example.rb
  * https://github.com/kachick/striuct/wiki

== REQUIREMENTS

* Ruby 1.9.2 and later (tested 1.9.2, 1.9.3)

== INSTALL

* sudo gem install striuct

== LICENSE

(The MIT License)

Copyright (c) 2011  Kenichi Kamiya

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.