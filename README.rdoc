= Striuct

* http://github.com/kachick/striuct
* https://rubygems.org/gems/striuct
* http://rubyforge.org/projects/striuct

== DESCRIPTION

Striuct meanings Strict Struct.
Handy and safty than Ruby's Standard Struct.

== FEATURES

* Auto check the link to objects that match defined condtions
* It is not only Type Check. Flexible Checker from expressions.
* After check, you can add one-step for set value (call "procedure" here).
* You can set a Default Value.
* Base API looks like Ruby's Standard Struct
* pure-ruby and not taint your name-space

== PLAN

* https://github.com/kachick/striuct/wiki/Plan

== SYNOPSIS

* setup
    require 'striuct'

* Macro "member" provides one of Struct+ interfaces for condtions and a procedure.
    class User < Striuct.new
      member :id, Integer
      member :address, /\A((\w+) ?)+\z/
      member :age, (20..140)
      member :name, /\A\w+\z/, /\A\w+ \w+\z/
    end

    # pass
    user = User.new 128381, 'Tokyo Japan', 20

    # pass
    user.age = 30
    user.name = 'taro yamada'

    # fail (Exception  Striuct::ConditionError)
    user[:id] = 10.0
    user[1] = 'Tokyo-to'
    user.age = 19
    user.name = nil

* more detail checker do you need, you can use functional object here.
  and Proc(lambda) run self's context
    class Game < Striuct
      member :monsters, ->monsters{[monsters - characters].empty?}
      member :characters, Array
    end
 
* but, link to object is able to clash
  use easy checker this case
    user.strict? #=> true
    user.address.clear
    user.strict? #=> false

* procedure for cast case
    class User2 < Striuct.new
      member :age, /\A\d+\z/, Numeric do |arg|
        Integer arg
      end
    end
    
    user2 = User2.new
    user2.age = 9 #=> 9(Fixnum)
    user2.age = 10.1 #=> 10(Fixnum)
    user2.age = '10' #=> 10(Fixnum)

* use default value
    class User3 < Striuct.new
      member  :lank, Fixnum
      default :lank, 3
      member  :name
    end
    
    user3 = User3.new
    user3.lank #=> 3
    
* Standard Struct always define "nil is default". ...realy?
   user3.name  #=> nil
   user3.assign? :name #=> false
   user3.name = nil
   user3.assign? :name #=> true

* and keeping Struct's good interface
    Sth1 = Striuct.new :id, :last_name, :family_name, :address, :age

    Sth2 = Striuct.new do
      def m
      end
    end

* taint namespaces when you hope to Standard Struct has same methods
    require 'striuct/import'

* and more added

* and adding


== REQUIREMENTS

=== Ruby
* 1.9.3
* 1.9.2

== INSTALL

* sudo gem install striuct

== LICENSE

(The MIT License)

Copyright (c) 2011  Kenichi Kamiya

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.