= Striuct

* http://github.com/kachick/striuct
* https://rubygems.org/gems/striuct
* http://rubyforge.org/projects/striuct

== DESCRIPTION

Provides safety container that is as handy as Struct.

== FEATURES
* Provides automated checking for your setters.
* When you link a object, Striuct checks "They are valid objects?".
  These checkers are not only Type Checker. They judge under your expressions.
* when use "inference", member will be fixed first passed object's class
* After check, you can add one-step before link a object (call "flavor" at here).
* You will be set default-value, and we have different meanings between nil and default-value.
* without undesirable naming for conflict, no-identifier, and more cases
* Base API looks like Ruby's standard Struct
* not taint your name-space(exclude striuct/import)
* pure-ruby

== SYNOPSIS

* setup
    require 'striuct'

* use two namespace, and same meanings
    Striuct
    StrictStruct

=== Struct+ "Secure"

* macro "member" provides to use condtions
    class User < Striuct.new
      member :id,   Integer
      member :age,  (20..140)
      member :name, /\A\w+\z/, /\A\w+ \w+\z/
    end

    # pass
    user = User.new 128381, 20

    # pass
    user.age = 30
    user[2] = 'taro yamada'

    # fail
    user[:id] = 10.0
    user.age = 19
    user[2] = nil

* more detail checker do you need, use functional object
    module Game
      class Character
      end

      class DB < Striuct.new
        member :monsters,   ->list{(list - characters).empty?}
        member :characters, ->list{list.all?{|c|c.kind_of? Character}}
      end
      
      monster = Character.new
      db = DB.new
      
      # fail
      db.characters = [1, 2]
      
      # pass
      db.characters = [monster, Character.new]
      
      # fail
      db.monsters = [:dummy]
      
      # pass
      db.monsters = [monster]
    end

* through "inference", and check under first passed object class
    class FlexibleContainer < Striuct.new
      member :anything, inference
      member :number,   inference, Numeric
    end

    fc1, fc2 = FlexibleContainer.new, FlexibleContainer.new
    # pass
    fc1.anything = 'str'
 
    # fail
    fc1.anything = :sym
    fc2.anything = :sym
    
    # pass
    fc2.anything = 'string too'
    
    # fail
    fc1.number = 'str'
    
    # pass
    fc1.number = 1.0

    # fail
    fc2.number = 1

* Standard Struct no check member name. 
    NoGuard = Struct.new :__send__, :'?  !'
    noguard = NoGuard.new false
    p noguard.__send__
    p noguard.methods.include?(:'?  !') # lost!!

* Striuct provides safety levels for naming.
    class SafetyNaming < Striuct.new
      begin
        member :__send__
      rescue
        p $!
      end
      
      begin
        member :'?  !'
      rescue
        p $!
      end
      
      protect_level :struct
      
      member :__send__, :'?  !'
    end

* privides some check methods
  * acccept? / sufficient?
  * restrict?
  * strict?
  * secure?
  * cname?

=== Struct+ "Handy"

* to through block called "flavor".
  below case for type cast
    class User2 < Striuct.new
      member :age, /\A\d+\z/, Numeric do |arg|
        Integer arg
      end
      
      member :name, ->v{v.respond_to? :to_s} do |v|
        v.to_s.to_sym
      end
    end
    
    user2 = User2.new
    user2.age = 9 #=> 9(Fixnum)
    user2.age = 10.1 #=> 10(Fixnum)
    user2.age = '10' #=> 10(Fixnum)

    user2.name = 10 #=> :10(Symbol)
    user2.name = Class #=> :Class(Symbol)

* provides default value
    class User3 < Striuct.new
      member  :lank, Fixnum
      default :lank, 3
      member  :name
    end
    
    user3 = User3.new
    user3.lank #=> 3
    
* Standard Struct always define "nil is default". ...realy?
   user3.name  #=> nil
   user3.assign? :name #=> false
   user3.name = nil
   user3.assign? :name #=> true

==== new constructors

* Subclass.define reject floating object.
  * except if no finished assign each member
  * returning object is frozen
      user3 = User3.define do |r|
        r.lank = 10
        r.name = 'foo'
      end

* Subclass.load_pairs easy make from Hash and like Hash
    user3 = User3.load_pairs lank:10, name: 'foo'

=== Keeping Struct's good interface
    Sth1 = Striuct.new do
      def my_special_method
      end
    end
    
    Sth1.new.respond_to?(:my_special_method) #=> true

=== Others

* Here, not taint your name-space. but enhancers are too, you can choose it.
    require 'striuct/import'

* run example.rb

* see https://github.com/kachick/striuct/wiki

== REQUIREMENTS

=== Ruby
* 1.9.3
* 1.9.2

== INSTALL

* sudo gem install striuct

== LICENSE

(The MIT License)

Copyright (c) 2011  Kenichi Kamiya

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.