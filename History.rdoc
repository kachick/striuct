=== 0.3.3 2012-9-7

* modify:
  * SubClass#to_s
  * SubClass#inspect

* fix:
  * SubClass.freeze

* add:
  * compatibility with keyvalidatable-API

=== 0.3.2 2012-9-4

* fix:
  * #assign
  * .for_pairs, .[]

=== 0.3.1 2012-9-2

* add:
  * default value via member macro

=== 0.3.0 2012-4-3

* modify:
  * use validation library (spin-off library)

=== 0.2.3 2012-4-2

* fix:
  * Conditions.#NAND
  * Conditions.#XOR
  * Conditions.#XNOR

=== 0.2.2 2012-3-30

* add:
  * aliases Conditions#[FUNC()] -> Conditions#[FUNC?()]

* fix:
  * GENERICS check when build condition
  * arity checker when default with block parameter

=== 0.2.1 2012-1-30

* delete:
  * Conditions#ANY, ALL

* add:
  * can choose timing of validation (member with option and safety_setter? and more)
  * add Flavors (Useful flavor builders)
  * .#to_struct_class, #to_struct
  * #each_name_with_index (alias-> #each_member_with_index, #each_key_with_index)

=== 0.2.0 2012-1-27

* delete:
  * constant StrictStruct
  * Eigen.#sufficient? (alias -> valid?, accept?)

* modify:
  * conditions to a condition (use condition generator Conditions#OR)
  * to expr a flavor, before check condition
  * inference flag under option parameter
  * long macro names (define_xxx -> add_xxx)

* add:
  * #each_pair_with_index

=== 0.1.7 2012-1-26

* add:
  * default with Proc
  * detail error message in Subclass.#[]=

* fix:
  * class duplicating

=== 0.1.6 2012-1-25

* delete:
  * import.rb

* modify:
  * Subclass.#define
  * naming risks (add bad name "_foo")
  * Conditions.#GENERICS (enum prior all? to each_value.all?)
  * timing of check default value

* add:
  * detail error message in Subclass.#define

* fix:
  * inherited behavior

=== 0.1.5 2012-1-17

* add:
  * #lock, #lock?
  * some Specific Conditions

* note:
  multiple conditions for 'or', dupulicated for direct throw member macro
  please use .#OR method in this case

=== 0.1.4 2012-1-16

* modify:
  * trace logs
  * naming risks(add bad name "to_foo")
  * Subclass#unassign

* add:
  * Specific Conditions
    (for Syntax Sugar of useful Functional Conditions)
  * Subclass.#each_index
  * Subclass.#valid?
  * Subclass#clear_at, reset_at

=== 0.1.3 2012-1-10

* add:
  * Subclass.#alias_member
  * Subclass.#valid?
  * Subclass#valid?

=== 0.1.2 2012-1-9

* modify:
  * Subclass.#hash

* add:
  * Subclass.#to_yaml

=== 0.1.1 2011-12-26

* modify:
  * Subclass.#sufficient?

* add:
  * Subclass.#empty?
  * Subclass.#has_value? (value?)
  * Subclass.#flatten
  * Subclass.#select! (keep_if)
  * Subclass.#select
  * Subclass.#reject! (delete_if)
  * Subclass.#reject
  * Subclass.#assoc
  * Subclass.#rassoc

* fix
  * Subclass.#sufficient?

=== 0.1.0 2011-12-25

* modify:
  * Subclass.#define

* add:
  * Subclass.#[] (alias load_pairs)
  * Subclass.#to_h

=== 0.0.11 2011-12-23

* modify:
  * Subclass.#cname?

* add:
  * inference checker

=== 0.0.10 2011-12-23

* delete:
  * Subclass.#lock, Subclass.#unlock?

* modify:
  * Subclass.#freeze
  * has_condition? -> has_conditions?
  * Subclass.#lock, Subclass.#lock? -> .close, .closed?

* add:
  * Subclass.#protect_level   # class macro
  * Subclass.#default?

=== 0.0.9 2011-12-21

* delete:
  * Striuct.load_pairs
  * Subclass.#conditions
  * Subclass.#procedures
  * Subclass.#defaults

* add:
  * Striuct.define
  * Subclass.#lock
  * Subclass.#default_for

* fix:
  * Subclass.#inspect
  * Subclass.#to_s

* note:
  * innner name changed "procedure" to "flavor"

=== 0.0.8 2011-12-18

* modify:
  * Subclass.#define
  * Subclass.#accept?
  * functional checker's action:
    Proc: context to instance
    Method: === to call

* add:
  * Subclass.#default

* fix:
  * Subclass.#values_at

=== 0.0.7 2011-12-16

* modify:
  * called macro's block to procedure 
  * public to private Subclass.#unlock

* add:
  * Subclass.#define
  * Subclass.#accept?
  * Subclass.#restrict?
  * Subclass.#assign?
  * Subclass.#assign

* fix:
  * use clone method ( initialize_copy )

=== 0.0.6 2011-12-14

* modify:
  * error type in some methods

* add:
  * Subclass.#sufficent?
  * Subclass.#define
  * Subclass.#sufficent?
  * Subclass.#secure?
  * Subclass.#lock?
  * Subclass.#lock
  * Subclass.#unlock

* fix:
  * typo

=== 0.0.5 2011-12-14

* fix class constructor
* modify #inspect
* add arguments checks

=== 0.0.4 2011-12-13

* divide modules for Subclass.#methods
* modify return values for void methods

=== 0.0.3 2011-12-12

=== 0.0.2 2011-12-11

=== 0.0.1 2011-12-11

* 1 major enhancement:
  * Initial release

