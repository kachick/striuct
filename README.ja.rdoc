= Striuct

http://github.com/kachick/striuct

== DESCRIPTION

Strict Struct の略です。typoが怖い方は、そのまま StrictStruct でも使えます。

格納するデータが決まってる時等、メソッド呼び出しが効いて名前チェックをかけてくれるStructはHashより気持ちが良いですよね。
でもStructを使うようなシーンって、メンバ名だけでなく中に入るデータにも「決まり」を付けたいと思うシーンが多くありませんか？
ノーガードはおっかない、かといって毎回毎回同じような構造体クラス書くのも面倒だー という向き用の Struct です。

== FEATURES

* メンバ毎に、値格納時のチェック条件を簡単に定義できます。
  ブロックやlambdaを使えば、型等に収まらないチェックが可能
* 基本的なAPIはStructっぽく保ちつつ、若干の機能追加をしています。
* pure-ruby

== PLOBLEMS

* 薄いドキュメント
* 汚いテスト

== PLAN

* サブクラスにマクロ safe_level を用意し、これに応じてアクセサ名の安全度をチェックさせたい

== SYNOPSIS

* setup
    require 'striuct'

* memberマクロの2引数目以降へ渡したオブジェクトを「条件」と認識して === を使った比較を行います。
  一つも適合する条件がない場合、例外を吐きます。
  またブロックを使うことで、柔軟なチェッカも定義できます。
    class User < Striuct.new
      member :id, Integer
      member :last_name, /\A\w+\z/
      member :family_name, /\A\w+\z/
      member :address, /\A((\w+) ?)+\z/
      member(:age) {|v|(20..140).include? v}
    end

    # これはOK
    user = User.new 128381, 'bar', 'foo', 'Tokyo Japan', 20

    # これもOK
    user.age = 30

    # これは駄目
    user.age = 19

* Structの代替えとしても使えます。
    User2 = Striuct.new :id, :last_name, :family_name, :address, :age

* Structのように、無名クラスを介さずブロックからサブクラスを作る事も出来ます。
    User3 = Striuct.new do
      member :name, /\A\w+\z/, /\A\w+ \w+\z/
    end

* リンク貼った時どれだけ注意しても、その後参照先のオブジェクトがぶっ壊れる可能性は残ります。
  致し方無いので、簡単にチェックできるようにしました。
    user.strict? #=> true
    user.last_name.clear
    user.strict? #=> false


== REQUIREMENTS

=== Ruby
* 1.9.3
* 1.9.2

== INSTALL

* sudo gem install striuct

== LICENSE

(The MIT License)

Copyright (c) 2011  Kenichi Kamiya

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.