= Striuct

http://github.com/kachick/striuct

== DESCRIPTION

Strict Struct の略で名づけました。若干typoがおっかないですね。

格納するデータが決まってる時等、メソッド呼び出しが効いて名前チェックをかけてくれるStructがHashより活躍している事と思います。
でもStructを使うようなシーンって、大概メンバ名だけでなく中に入るデータにも法則性がありませんか？
ノーガードはおっかない、かといって毎回毎回同じようなreader,writer書くのも面倒だー という向き用のStructを考えて見ました。

== FEATURES

* メンバ毎に、値格納時のチェック条件を簡単に定義できます。
  勿論、型チェックしかできないという事はありません。
* 基本的なAPIはStructっぽく保ちつつ、若干の機能追加をしています。
* pure-ruby

== SYNOPSIS

* setup
    require 'striuct'

* basic
    class User < Striuct.new
      member :id, Integer
      member :last_name, /\A\w+\z/
      member :family_name, /\A\w+\z/
      member :address, /\A((\w+) ?)+\z/
      member(:age) {|v|(20..140).include? v}
    end

    # pass
    user = User.new 128381, 'bar', 'foo', '1-1-1 Town Tokyo', 20
    p user

    # fail (Exception)
    user.age = 19


== REQUIREMENTS

=== Ruby
* 1.9.3
* 1.9.2

== INSTALL

* sudo gem install each_section

== LICENSE

(The MIT License)

Copyright (c) 2011  Kenichi Kamiya

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.